import tkinter as tk
from tkinter import messagebox
import numpy as np
from sklearn.tree import DecisionTreeRegressor
import catboost

class FitnessTracker(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Fitness Tracker")
        self.geometry("400x300")
        
        # Labels and entry widgets for activity input
        self.label_steps = tk.Label(self, text="Enter steps taken:")
        self.label_steps.pack()
        self.entry_steps = tk.Entry(self)
        self.entry_steps.pack()

        # Button to trigger fitness metrics calculation
        self.button_calculate = tk.Button(self, text="Calculate Metrics", command=self.calculate_metrics)
        self.button_calculate.pack()

        # Label to display the fitness metrics result
        self.label_result = tk.Label(self, text="")
        self.label_result.pack()

        # Initialize decision tree and CatBoost regressors
        self.model_decision_tree = DecisionTreeRegressor(max_depth=3)
        self.model_catboost = catboost.CatBoostRegressor()

        # Train the machine learning models
        self.train_models()

    def train_models(self):
        # Load fitness dataset (example data)
        # Replace this with your actual dataset
        data = {
            'steps': [2000, 3000, 4000, 5000, 6000],
            'calories_burned': [100, 150, 200, 250, 300],
        }
        X = np.array([[data['steps'][i]] for i in range(len(data['steps']))])  # Input feature
        y = np.array(data['calories_burned'])  # Target label

        # Train decision tree model
        self.model_decision_tree.fit(X, y)

        # Train CatBoost model
        self.model_catboost.fit(X, y)

    def calculate_metrics(self):
        # Get input data from user
        steps = float(self.entry_steps.get())

        # Predict fitness metrics using decision tree and CatBoost models
        calories_decision_tree = self.model_decision_tree.predict([[steps]])[0]
        calories_catboost = self.model_catboost.predict([[steps]])[0]

        # Display fitness metrics result
        result_message = f"Calories Burned (Decision Tree): {calories_decision_tree:.2f}\n"
        result_message += f"Calories Burned (CatBoost): {calories_catboost:.2f}"
        self.label_result.config(text=result_message)

def main():
    # Create and run fitness tracker app
    app = FitnessTracker()
    app.mainloop()

if __name__ == "__main__":
    main()
